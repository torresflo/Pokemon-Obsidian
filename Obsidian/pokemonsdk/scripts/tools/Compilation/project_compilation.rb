module ProjectCompilation
  ScriptLoader.load_tool('Compilation/project_compilation_utils')
  ScriptLoader.load_tool('Compilation/project_compilation_data_builder')
  ScriptLoader.load_tool('Compilation/project_compilation_graphics_builder')
  VD_SCRIPT = 'Yuki__VD.rb'
  RELEASE_PATH = 'Release'
  GRAPHICS_FILES = {}
  NO_RECURSIVE_PATH = []
  DATA_FILES = {}

  @scripts = []
  @next_scripts = []
  @yuki_vd = 0

  module_function

  def start
    make_release_path
    start_script_compilation
    make_game_rb
    make_graphic_resources unless ARGV.include?('skip_graphics')
    make_data unless ARGV.include?('skip_data')
    copy_lib unless ARGV.include?('skip_lib')
    copy_audio unless ARGV.include?('skip_audio')
    copy_binaries unless ARGV.include?('skip_binary')
    # copy_plugins
  end

  def start_script_compilation
    compile_rmxp_scripts
    # Compile script from PSDK
    compile_psdk_scripts
    # Compile script from project
    compile_vscode_scripts(ScriptLoader::PROJECT_SCRIPT_PATH)
    save_scripts
  end

  def compile_rmxp_scripts
    ban1 = 'config'
    ban2 = 'boot'
    ban3 = '_'
    load_data('Data/Scripts.rxdata').each do |script|
      # @type [String]
      name = script[1].force_encoding(Encoding::UTF_8)
      next if name.downcase.start_with?(ban1, ban2, ban3)
      @next_scripts << Utils.compile(name, Zlib::Inflate.inflate(script[2]).force_encoding(Encoding::UTF_8))
    end
    GC.start
  end

  def compile_psdk_scripts
    puts 'Compiling PSDK scripts...'
    lines = File.readlines(ScriptLoader::SCRIPT_INDEX_PATH)
    lines.each do |filename|
      filename = filename.chomp
      puts "Compiling #{filename}"
      script = File.read(filename)
      if filename.end_with?(VD_SCRIPT)
        @scripts.insert(@yuki_vd, Utils.compile(filename, script))
        @yuki_vd += 1
      else
        @scripts << Utils.compile(filename, script)
      end
    end
  end

  def compile_vscode_scripts(path)
    compile_scripts(path)
    Dir[File.join(path, '*/')].grep(ScriptLoader::SCRIPT_FOLDER_REG).sort.each do |pathname|
      compile_scripts(pathname)
    end
  end

  def compile_scripts(path)
    Dir[File.join(path, '*.rb')].sort.each do |filename|
      next unless File.basename(filename) =~ /^[0-9]{5}[ _].*/
      puts "Compiling #{filename}"
      script = File.read(filename)
      if filename.end_with?(VD_SCRIPT)
        @scripts.insert(@yuki_vd, Utils.compile(filename, script))
        @yuki_vd += 1
      else
        @scripts << Utils.compile(filename, script)
      end
    end
  end

  def save_scripts
    File.binwrite(File.join(RELEASE_PATH, 'Data', 'Scripts.dat'), Zlib::Deflate.deflate(Marshal.dump(@scripts + @next_scripts)))
    puts 'Script saved...'
  end

  def make_game_rb
    # Compile real Game.rb
    game_script = %w[
      PARGV.rb
      GameLoader/0_fix_update.rb
      GameLoader/1_setupConstantAndLoadPath.rb
      GameLoader/2_displayException.rb
      GameLoader/3_load_extensions.rb
      GameLoader/31_ruby_dependencies.rb
      GameLoader/32_console_compiled.rb
      GameLoader/41_load_data_compiled.rb
      GameLoader/Z_main.rb
      GameLoader/51_load_game_compiled.rb
    ].collect { |filename| File.read("pokemonsdk/scripts/tools/#{filename}") }.join("\r\n\r\n")
    File.binwrite(File.join(RELEASE_PATH, 'Game.yarb'), Utils.compile('Game/Boot.rb', game_script))
    # Write Game.rb
    File.write(File.join(RELEASE_PATH, 'Game.rb'), <<~'SCRIPT' )
      if File.expand_path('.').match?(%r{[^a-z0-9 _\-\\\:/\.\(\)\[\]]}i) && ENV['WINDIR']
        require File.expand_path('lib/LiteRGSS.so')
        LiteRGSS::Config::Title = "Error"
        LiteRGSS::Graphics.start
        sp = LiteRGSS::Sprite.new
        sp.bitmap = LiteRGSS::Bitmap.new("\x89PNG\r\n\x1A\n\x00\x00\x00\rIHDR\x00\x00\x02\x80\x00\x00\x01\xE0\x02\x03\x00\x00\x00H\xBF4w\x00\x00\x00\tPLTE\xFF\x00\x00\xFF\xFF\xFF\xFF\xF2\x00\xA2\x9B8\xE8\x00\x00\x0E\x9CIDATx\x01\xEC\x95M\x92#+\xB2\x85\xA1\xEC\xF9\xE4\x8Ez\x00{h{\xAB \x06\x9A\xBB\xCC\xF0\xFD\xDC\xA5\xF4\xF0Y\xAF\xF2\x9D\xE3\x10\xA1\b\xA5T\x95\xA5\xAA\x9B\x8A\xDB\xED'SR\x00\x1E\xF0\x81\xFF\x90B\xA1P(\x14\n\x85B\xA1P(\x14\n\x85B\xA1\xFFn\xA9\x98u|Z6\xD3\x94\xAC'\x7F\xD0ws}\x00\xEC\xE0\xB24I\xEDT\x80\xF8\xC2\xA7\xE4\x86\x9F\xDAD\xFD\xE1|\x80\x02\xAE\xDCzJ\xDD\x1F\xCE\n\xA8\xE3(O\v\xB8\x80\xAB\x9E\x1A\xB0\xED\x8E\xF2$b\x16\xB75I\xF2\x04<W\x92\x10p\x96\x99\x01x\xC62\x83\xDA\f\xAE\xBE\x02\xF6\xD3\x01\x8E\xEARW\x17\xD7\x13\x02\x8E\x18\x9CY|\xAE\x18<y\x1DL\x8Fo\x92wS=\x03\x9Cw\xF1\x99\x00Yf:\x01Q\xA4\xB3\xD7\x1C\x02\xEAy\\\xBC\x02\xFA-\xA2\t\x15\x86\xC7w\"\xC0P(\x14\n\x85B\xA1P(\x14\n\x85B\xA1P(\x14\n\x85B\xA1P(\x14\n\x85B\xE7TnI\xF9+\xA3YS\xEAe?\xCE~M\xFFHeo5\xA5|\xFB\xB3:\xBE\x9A\xCA\x83\xF7\xF5\x15\xC0\x8A\x01M\xFD\x01`n?\x06\xDC\xD9\xD7\xE3H\xFF\x00\xC8\xF9>\x01\xD8r?\xEEt\x05L\x8F\x00\x7F\xE2\xD8\x0E\xDB\x1E\xA7\xF5\xDB\x00\v\x00\xF5\x9D\x80\xD7\x9E\xE4\x02\x1F\xC0\x8D\x04\x04O\xBE\x80I\x1A\xFA\xAC\xB6T\xD0\xD4\xCDJ%)\xFD%\xE8\xC9\x8DO\x95;\xB8v\xBC\x8B%\xF0\xC1L\x866&\xC0\xCB\xD7K*h&\x93\x925_\xD4\xDC\x04\xC7\x80M\xE7k\x93&%\x95\x8E>\xCE\xF7\x04\xD0,\x99e\xD3\xAA`\x94R\xC4\x16\x13k\xB5\xA3\xEF\x06\xB8Z\x11\xD0@\"\xE8\xC9\rO\xD9\xBAp\f\x13`\xF5\n\x9BV\xAD\xD1\x1C\xCC\xC9\x00\x88&\x00;\x87\f\x8F\x15<x\xA5\xC1\xBE\xE1\xDD\x8Ew\xB0\x18\xE7{\x02\xD8\x05\xB68a\x9C\xC6\x00\xCC\x8B\n\xDA\x85\x1FxI\xF2\x05O\xAB\x15\x00\xAF\xF4Fn]\x96\xC53\xA5\x8B\xE03\x8C\xFD\xED\x9Aumw\x01 \xCE\xACH\xC3\x10g@\e\xEE\xF5\x05\xDC\x06\xC4\xB9\xC1\x86S<\x06\xD4\xBC4\xC1<e\x02\x16\xF4\x16t#\x84\xCA\rp\xB3\xAA\xC0\x1A1\x93\xFD\t}l\xE0`uF\xB4\x96mRF\x04&$ \\\xBA4l\xDAC\xD3MV\e\x8E\x138\x7F\x17\xD0X_\x8Ak\x00\xD6\r\x10\x87r\x00l}\x05\xE4\x13\x01\xCD\x01\xE9?\x00\xD6\x1F\x00f\xBB\x01\x9A\r\xC0l?\x0F(:\x01q\x80\x97\xDD9\x03\x10\xB15\x01\xF1\x84>\xD9\x03\"N\xBF\x0FX\x1F\x00\xD6\x1F\x03z%\xD8\x03z\xF8|\x04\x94\x7F\\\x98\x87\x130{ \xD4\xE9b\xAF\x1D\f\xAC\xEF\x02\xF6\xBD\x8B\xD3\x00\xEC\xF2I@\xD1\e\xA0\xAC\x80=\xD9\x0E\x90\x95\xA2\xAC\x80x\xA2\xD5\x01\xF0G1\xA8\x0F\x00\xF5\x19 \xDE\xE2\x00\xB3\xAB\xAC\x80\f9\xDA\x8FD\x83\x8D\x17\xADi\x05\xCF\xC3\e+ Vd\x16Wq@\xAE^D\x96\x018^V$\xF8\x04\xC4\xC4\xE3\x04\xF7Y\xCCM0\x83\xEB3@\xC4\r\x06X\xE1<\x06\xC9\x89:\xD8\x10U\xC6:\xC8*\xC0\xE9}E\xAF\x83\\\xC4\x80\x93y\x00\xCBZ\a\xBD<\xB2\xDE\xD51\x93\x9B\xB3n\xE8h\x12\x90q6b\x90\xA78\xEB c\x90u\xD0\x16}\f\x88:\x89\x01\xDE\x11m\x05\xC4M\x82m\xA2\x12\xF3N\xC8;@\xBFIx|\xB5\xF1lf\x92\xE0&\x01,\x01yM\"({\x99\xE6\xCD\xCB\x8E\xAD.\xCE\xBE98\x15\x8E\xD5\xF5&\xA1\xBFq\x93\x88\xD7\x89G\x80/*\xEF\e\xE5\x17'+\xBF\x8Fk\xD3\xFF\xEC|\x90\x1E\xDD\xA1\xEF\x06\xDC\t\x01xn@\\#'\a\f\x85Bg\x11.\x9D\a\x19\xBF\xF5\xEA\x93W\xBE\x0E\xEE'\x00\xCB[\x00\x9F+\x00\xBF\xA3\x9A\xB2\xE6\x8B\xD6&M\xA4\xB6R,\xE5kKh\xD5\x94:\x06\x05&\xE0\xA9\xE9\xDA\xD9[\xB2\xE2\xC7\xD8\xA9\xF5\v\x00\xB3i\xB5l\xBD6S\xC1\xB5_\xAA5\xFC\xA7\xDA\xD1\x10>K\xB6Vhg\x96\xD0\xD5kO\xD6\xF1\x8AVE\xF3\xAF\alZ$k\x95\xA4]\xA4\xF5R3:Z\xE2\x97JnE$/\n\xC0\x86q\xFF\x94\x8A\xC1\x82v\xC5\xE7\xAF\a\xC4\n\x9A\x17x\x17q\x85\xAFRJR\xCD\x00\xC4\x88?\xBBE\x19v\r6xe\xFC\x12\xF2\v\\|\x03\x94\xBE\adx\xC1\xDD\x0EX7@\xD8\xC0\xD9\x0Eh\xBD D\xBF\x12\xD0\x0E\x80\xA2\e \xC2m\x05\x84M\xAA7@d\xD6\xD7\x012\xF4v\x80\xA9\xBB\x8B\xE9j\x84\xDE\x04D0\n\x06\xA6\xAB\x8B\xA7\xF8\xD7\x01\xB6#\xA0\xDC\x00\xB7\x18\\`\x93\xF4\x06\xF8\xE0\xDE\xF9\xED\x1AY\xEC'\xB8\xB9\xD8\xB3\x98\aG4\x11\x99Y\xCC\x13\xC4\xB9\xF6\x99\xC5\xFE\xF9\x02@\xAF\x83\x00lf+ \xEB\xA0\x8D:\xA8^\a\xBB\xD7A\xC6\xA01\x06\x11\x8A\x95\x9D\xF9+\xEA\xE0\xB8I\x1A\x0E\xB1\xCA\n\xE87\x89\xF2&1\x0F\xB3N_\xE3\xDC\xDC&\t\x02\x02\xC9\x81K\xE7K\x92\xE4\x89\xDF\xD3\x97\\\xB3\xAFJ\xE5\xE4\x80\xB8t\xCF\r(\xFD\xE4\x80\xA1P(\x14\n\x85B\xA1P(\x14\n\x85B\xA1P\xE8\xF7(\xDB]G\xC1GSn\xFB>\xBD\xB3\x99my4_;\xFE\xEE\f\xD1\xE5\x0F\xA5\xDC\xBD\xD3aa\xB6\xBEu\\:U\xD3\xE3L\xFD\x03`nz\a\xF7\x00p\xBE \xE3\xB7\xEC'\xD0a({\xC0\x03\xC5w\x01\xBB\x13\xED\x00\xF5\x13\x80\xE9\xC7\x80\x0F\xCE{\x9D\xB3\xDC\x1Dp\xBEl\x93=\x00\xD4\xC3do\x04,\xAB\xED1p2\x00K\xD2\xEB\xA5d\xCD\x17\xAD-\xF3H5_\x9B4)\xA9tX\x88^\xBB[\xD6Tl\x8C\x8F\x0E\xA9\r\x8Dk\xABp\x84('Hu\xB9\xD0\xCE@\x80^7\xC0\e\xC2\a\x0E\t\xFDU\xB0\x96\x90Z@Y\xAD\rr}\x02\x881\x00\xDA\xA5W\xCB\xD6\t(\xD6\x14\xAFY\x97\xCE\xD7+\xD6f\x80p\x1C\xFD\v\xC6\xD3\xEC\x10S4l\xC1\x1A\x86\xCD\xC1\x00\x14\xD63^\xC6\xC4\bn7X\b\x88\x06\x87\x04c\x00\x14\x13\xC5\x891\xFCW\xC0y\xA4\x9A\xDBC\xC0.\xADH\xD6J\x17\xC3^\x8B\xF8'\xD5\xDC\n>\x18N\x18\axV\x15\x8C\x8D\x0E\xC1\x00>y\xC1;\x8BO\x00?\xC2f\xC1\xEA\xE8@\v\x06\f\x10Z\xF9\x90\x10\xA6\x80\x10\xF3b)\x86\xBF\xA4\xCF\x00\xE2\xEC\x15S\n\x01\xD9\\\ex\xE6\xFBx\xCDs\x91\xD1\xC0\xF8\xD4\xADc\x04(\x81`\xB4 M}\x81\x01\x98\xB670U\xF1!\xCEI\xC0t\v\xD5\xE2\x8B\xAC\x8E-w\xF1\xBB\x034;\x02\x9A\r\xC0l\xF7\x80\xB6\aD#U\a\xE4\x04\x03p\xB4\xFB\#@\x1C2]\xDC\x1C\x101\xB4\x01\x96\x97\x01\xEB=\xA0\xEC\x01\xD9@l\x1E\x00g\ey\xF1\x11\x10\xE9\xC3$\xE9\x0E\xE8a\x8E\xFD!\xB6G\x8Epg\xF7\x80\xBA\xB98\xF9\x047\x17\xA7\x01\xD8\xEF]\\\xF7.f\x83\xF1\xEA\xAE\xCE\x03p\xB6\xF3\xED\xCCw\x80\f\xDE\xC2\xD8\xE6\xDAEHjH\xCE\x15P>\\[\xA3\xCC|\aP\xEF\x01\xCB\x1E\x90\r\x991\xB8\x01\x8E6\x99>\x02\x8E\x05=B=Q|\xA2\xDB\xC5\xF3\x11\x10e\xCDS3\x955I\xD6,f\x83\x19\\\a\xA0g\xB1\x9F\xA0\f@d1N\x90\x863\x8B\xD7$\x91\x99\xC5\x0E8\xB3\xF8\x96$\x04tS\x9C`\x9FDe+~\x1F\x01\x11\x00(R\x00\xAC\x1E\x83\xD8\xCFZ\a\x19\x83\xAC\x83\xB68\x8F\xD7Aw9\xCCG\x87\xC7 \x9E\x11K0\xE2\x04I0\t\xEB)\x00m\r\xD2>\x019\xBFx\x1D\xC4\\^\a\xBD\x9A\xBA\xAF\xEA\xB8\x8B\xBDd\x1C\x01Q\\s' \x03\x97\x15I\xD7\x9B\x84\xF1\x80\x9B\x04\xF3:\xCF\xB8I\xE0=\x9C\xF7\xEC\xE0\xB1\xE39\xF5\xE2\xEF0\x9E\xE8\x06\xB4eK\x12\x8C\x94\x018<4\x93\x84Q\x90Xv\xEF\x00\xF3\xB2\x1C\xAF\xE2\x1F\xA8\xFC\x8C\xF1\xEFP\x1E\x05\xE8\x94\x80\xC2C<3\xE0K:=`(\x14\n\x85B\xA1P(\x14\n\x85B\xA1P(\x14z]\xB9%\x9D\x8Fz\x18P\xE5\xD8ftj@9'`\n\xC0O\x03f\xCD\x97\xD4\x93\n8\xF0\x11\xFC\xA1\xA5\xF9\xDA\xD2U\xD1S\x97\x8B\xBE\x15\xB0Z6\xB1\x96jO\xC9@\x94D\f\x80\x15]f\xE8\xA9\x8B\xF5\xB7\x1Db6\xD3\"Y\xE9F-\xF0l\as\x11i\x8A\xEE\x96\xBA\xA0\a\xC3\xF5\xAD\x80\x9A\x97V\x10t\xEE\xC7B@|\x14\xDDt\x7FK\xE0o\xF2&\xBC\xE1b\xB3\xA5U\xF8\xB6\xA2-~\x82\xC9n\x80\xD2O\x03(8BC\x1C\xAA\xCA\x0E\xD0\xDE\x0F\xC8\x92\x8C\xF0K\xC8\xDD\xECq\xA8\xF5\xE6\xE2E\xDF\xEF\xE2\rP\xC6Cme\a\xD8\xDE\x0FX@\x81lM\n@d1\x00\xEB-\x8B\xD1\xF3v\xC0\x8A\x18\x14\xC4 \xE3\x0F\x85\x8F\x85\x10\xA9\xBD\xD5A\x13\f\xBF\xAF\xCC\xD0\x8D,\xC3\x04C\x92TqO\x83o\xBDI\xAA\xE4w\x02\xFE@\xEF\xBB\xE2\x020\x00C\xA1\xD0\xDFE\x19w\\\x12\xDCnm\x7F\xFDM)\xAF\xE7\x87*\xD5\x1E\x95!;\xDE\x88nUq\x8F\xF6tX\xE1gTM?\x00^\xD6\"\xA8f\x1Fgu\xCB\xE2\xEF\xDD\x03\xCA\xDD\x86h\x95\xD1\x87i\x04\x88/\xA9\xE3\xEF9\xA0f}\x02X\xD2\x03\xC0\x8A\xBF\x03 \xACr\xE3\x97J*\xAF\x01*_,\a@\x99{\xC5\xDC\xFA\xE0.qK-\xBE\xE0\xDDh\xB9;&Z\xF1\xE80\x8D\xBCx+\xE5\e 6\xDF\xD3\xB5!\\j\x93\x96z\xEE\x04\xE4\t\xFB\xFE\x8B\t[\xD7.\x8AQ\a\xEC\\\xB7\xA6m\x04_\xBB\xF6\xB4\x1A\x80]^\fA\xBE&\x03\xD0T\xAC\xD9\x82p\xA9\xCDz\xB6\xC5\x01\v:\xAB\xC1\xA4\x9Au\x1A`\xF5\xDA\xC7\xD2\xD6\xB4d\xD3m\x84\x87\x94i\xEE\xEDi\xC5\x158\xCD\x8B!x\x03\\\x9Ab\x97\xDC)\xE6\xD2\x82_w1\x1F8{\xA9\xD9;\xBB\xC0\x10Q\x85\x7F\x9A\xD0f\e\x819\xE6Y\xDB\xD3\x8Ae\x82\xD3\xD4\xD7O\x10\x138 \x9C\xA6xr&n\xD8\xE3\x86q\xAE\xDC\x03\x8E\xC2\x9F\xB9\x13\x06\x84qu\xDA\xDFF\xB0E\xD2\xAC\xEDa\x95*\x03\xB9\xC8\xF5W\x01\x11|\x98\x8Ei\v@\xB3<\x03\xFB\x00\xE8\x06\v\xA2\x95Ks?\xD7\x86\xCAr\x04\xAC:-\xA7\x15\x8A\xA3\x03\xB6\x17\x93\xE4\x06X\xB9_\xC5t\x0E\xC8i\x9F\x01\x8A\xD7\x0E\x022n\xF7\x80\t\xAF\xAE\x80\xD3\x8A!D\xC0\xD7\xB3\x98\x94\x04D\xE40Z\xC4c\x11\xD3z\x10\xA5~t1b\n\xB1\xD0\xBD\xAAa\xA4{Hl\x80H]\xBE6,\xA7\x15\xA7\xD6\xF9\xFC\x8AXf\x06 \x0F\x8B\xDB\xD4\x01\x88_\x02\xEA\#@Y\x01\x91\r{@\xD4AYc0M\xAB\x01\xA8\xBFt\x93\xE0\xF4\x9A'\xAB'\x89\x7F\xB8\x90\xE7\xA0\x8E,n\xEEH\x99I2\x97\xCE\xF3\xB48\xE2I\x8F\x9BD\x16]-\x87\x15w\xEF7\xC9\x8B\x80\f\x16\x00\"+\x18O\x98\x15\xC5MX\xED\fL~\x89\xB2\xB0\xE5\x11i4@\x1D\xB1\xE9<\x9An#\x04\x14\xDBYN+\x8Fg\e>z)\b\xCD\xAF6\xD4\x02\x14*\xE6\x9B\xF9yz\xB2\xE0\v\x175o\x92d~N4`\xAE\xCE\x8Bn\xDC$\xCDG\xF0\f\x02[\x10\xB4\xD3r\xB5\xAA>\xCD\xCB\x80\x94<H\xEC\x11\x9F\xCF\xF4\xB9\x80//\x13\xFD\xDD\x00C\xA1P(\x14\n\x85B\xA1P(\x14\n\x85B\xA1P\xE8\x8C\xCA-\xE9|\xD4[\xAFl\x0Fx*k\xA3\x9C\x1CPO\x04x \r\xC0\x1F\x02f\xCD\x97\xD4\x93J\x03Q\x93\xDA\xE0\xD9\xDA\x94\x1Dpq-IjJ=\xF7bo\x02\xAC\x96M\xAC\xA5\xDAS2\x15S\x00\x9A\x02\x10\r\xC9\xD6\x13Zb\xB9Wk_\x7F\x88\xD9L\x8Bd\x15\x92by\xED\xD2@\x84\xAF\x92\e\x1A\xE8G\xB3\x81\xB4i\xCDo\xF02\x015/8\x1A\x1DAX\x04A\a\xCF\x16\x00\xA2\xC1'Db\xC1Q\x83N\xBF\x9C\xCF]l\xB6\xB4\n\xC7\"\xD2\x92\xF4\x1D \x1A\e\xA0\x9D\x00P\xB0\xBEm\x80\xF8\xD8\rP\xDE\t\xA8\xF8\xF6\xE0\xEA\tQv\x03dc\x05\xAC\xEFt\xF1\x06(|X\x01sgc\x05,\xEF\x04,H\x12a\x92\x00P7\x17\x03p\x97\xC5U\xDE\bX\x11\x83\xAC~\xA8x\xC9l\x05\x04\r\x1A\xB7:\xA8\xBD\xBC\xE32\xF1\x9B\x04\xCEL\xB8%\x98$Uv\x80h\xAC7IV-o\x01\xFC\x94\xE4\xDD\x00\x01\xF8_\x0F\x18\n\x85~E\xDF\xFE\xFCk\xE7\xCF\xB8\xE3x\xB5\xE1\xB6\xDB]\x7FS\xCA\xEB\xF9\xA1J\xE5{\xB8\x0E\xD3\x1F\xFBnk\x1F\xAD*\xEEQ\xDC\xE7\xFB\x15~F\xD5\xF4\x03\xE0e\xE2\x01\xD0>\xCE\xEA\x96\xC5\xDF#\xE0?wCr\xB7!Ze\xF4a\x1Ay\xB5\x9Av\xFC=\a\xD4\xACO\x00K\x9A\x80\x87\xDD\xE2\xEF\x00\b\xAB\xDC\xF8\xA5\x92\xCAk\x80\xCA\x17\xCB\x01P\xE6^1\xB7\xDE#\xAC\x80Z|\xC1\xBB\xD1rwL\xB4\xE2\xD1a\x1Ay0\xD3g\x94o\x80\xD8|O\xD7\x86p\xA9MZ\xEA\xB9\x13\x90'\xEC\xFB/&l]\xBB(F\x1D\xB0s\xDD\xFFM\xDB\b\xBE\x04g8\xDB\xD3j\x00vy1\x04\xF9\x9A\f@S\xB1f\v\xC2\xA56\xEB\xD9\x16\a,\xE8\xAC\x06\x93j\xD6i\x80\xD5k\x1FK[\xD3\xF2\xED\xDF\xFF\xDAFxH\x99\xE6\xDE\x9EV\\\x81\xD3\xBC\x18\x827\xC0\xA5)v\xC9\x9Db.-\xF8u\x17\xF3\x81\xB3\x97\x9A\xBD\xB3\v\f\x11U\xF8\xA7\x89~\xFB\xF3_\xDB\b\xCC1\x8F\xCE\xF6\xB4b\x99\xE04\xF5\xF5\x13\xC4\x04\x0E\b\xA7)\x9E\x9C\x89\e\xF6\xB8a\x9C+\xF7\x80\xA3\xF0g\xEE\x84\x01a\\]\xF5\x8F\xF4\xCFm\x04[$\xCD\xDA\x1EV\xA92\x90\x8B\\\x7F\x15\x10\xC1\x87\xE9\x98\xB6\x004\xCB3\xB0\x0F\x80n\xB0 Z\xB94\xF7sm\x7F\xFC\xFB\xFF\x8E\x80U\xA7\xE5\xB4Bqt\xC0\xF6b\x92\xDC\x00+\xF7\xAB\x98\xCE\x019\xED3@\xF1\xDAA@\xD3#`\xC2\xAB+\xE0\xB4b\b\x11\xF0\xF5,&%\x01\x119\x8C\x16\xF1X\xC4\xB4\x1ED\xA9\x1F]\x8C\x98B,t\xAFj\x18\xE9pq\xBA\x01\"u\xF9\xDA\xB0\x9CV\x9CZ\xE7\xF3+b\x99\x19\x80<,nS\a ~\t\xA8\x8F\x00e\x05\xD4r\x00D\x1D\x945\x06\xD3\xB4\x1A\x80\xFAK7\tN\xAFy\xB2z\x92\xF8\x87\vy\x0E\xEA\xC8\xE2\xD6\xCB4\xF0t\x1FK3S\xBF\xFD\xE9I2\x92\x1E7\x89,\xBAZ\x0E+\xEE\xDEo\x92\x17\x01\x19,\x00DV\xB0\x0EbV\x147a\xB530\xF9%\xCA\xC2\x86\v\xD5\x97\xF5\x18T\x9B\xCE\xA3\xE9\xB7\x11\x83|\x06\x8A\xED,\xA7\x95\xC7\xB3\r\x1F\xBD\x14\x84\xE6W\ej\x01\n\x15\xF3\xCD\xFC<=Y\xF0\x85\x8B\x9A7I2w1\r\x98\xAB\xF3\xA2\e7\xC9\x9F>\x82g\x10\xD8\x82\xA0\x9D\x96\xABU\xF5i^\x06\xA4\xE4Ab\xA7\x8F7\xEDN\x9F\v\xF8\xF22\xD1\xDF\r0\x14\n\x85B\xA1P(\x14\n\x85B\xA1P(\x14\n\x85B\xA1P(\x14\n\x85B\xA1P(\x14\n\x85B\xA1P(\xF4\x1F\xA6\xFFo\x0F\x8E\x05\x00\x00\x00\x00\x06\xF9[OcG\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xC0C\x961F\xF6b\xC8|'\x00\x00\x00\x00IEND\xAEB`\x82", true)
        begin
          LiteRGSS::Graphics.update until LiteRGSS::Input.trigger?(:C)
          LiteRGSS::Graphics.stop
        rescue Exception
          0
        end
        exit
      end
      RubyVM::InstructionSequence.load_from_binary(File.binread('Game.yarb')).eval
      begin
        $GAME_LOOP.call
      rescue Exception
        display_game_exception('An error occured during Game Loop.')
      end
    SCRIPT
  end

  def make_graphic_resources
    release_path = File.join(RELEASE_PATH, 'pokemonsdk', 'master')
    psdk_path = File.join(PSDK_PATH, 'master')
    GRAPHICS_FILES.each do |cache_name, path|
      GraphicsBuilder.start("#{psdk_path}/#{cache_name}", "#{release_path}/#{cache_name}", path, NO_RECURSIVE_PATH.include?(cache_name))
    end
    # Copy Shaders
    Dir['graphics/shaders/*.txt'].each { |filename| File.copy_stream(filename, File.join(RELEASE_PATH, filename)) }
    # Copy Fonts
    Dir['Fonts/*.*'].each { |filename| File.copy_stream(filename, File.join(RELEASE_PATH, filename)) }
  end

  def make_data
    DataBuilder.start(RELEASE_PATH)
  end

  def make_release_path
    Dir.mkdir!(File.join(RELEASE_PATH, 'Data'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'audio', 'bgm'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'audio', 'bgs'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'audio', 'se', 'cries'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'audio', 'se', 'voltorbflip')) if Dir.exist?('audio/se/voltorbflip')
    Dir.mkdir!(File.join(RELEASE_PATH, 'audio', 'me'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'audio', 'particles'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'graphics', 'shaders'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'pokemonsdk', 'master'))
    File.copy_stream('pokemonsdk/version.txt', File.join(RELEASE_PATH, 'pokemonsdk/version.txt'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'Fonts'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'Saves'))
    # Dir.mkdir!(File.join(RELEASE_PATH, 'plugins'))
    Dir.mkdir!(File.join(RELEASE_PATH, 'ruby_builtin_dlls'))
    lib_dirs = Utils.lib_files_to_copy.collect { |filename| File.dirname(filename) }.uniq
    lib_dirs.each do |dirname|
      Dir.mkdir!(File.join(RELEASE_PATH, dirname))
    end
  end

  def copy_lib
    puts 'Copying Ruby Library (add skip_lib to arguments to skip this part)'
    Utils.lib_files_to_copy.each do |filename|
      IO.copy_stream(filename, File.join(RELEASE_PATH, filename))
    end
  end

  def copy_audio
    puts 'Copying Audios (add skip_audio to argument to skip this part)'
    Dir['audio/**/*'].each do |filename|
      next if File.directory?(filename)
      IO.copy_stream(filename, File.join(RELEASE_PATH, filename).downcase)
    end
  end

  def copy_binaries
    puts 'Copying binaries'
    Dir['ruby_builtin_dlls/**'].each do |filename|
      next if File.directory?(filename)
      IO.copy_stream(filename, File.join(RELEASE_PATH, filename))
    end
    %w[
      fmod.dll
      Game.exe
      Game-noconsole.exe
      msvcrt-ruby250.dll
    ].each { |filename| IO.copy_stream(filename, File.join(RELEASE_PATH, filename)) }
  end

  def copy_plugins
    puts 'Copying plugins'
    %w[
      plugins/LiteIGD.rb
    ].each { |filename| IO.copy_stream(filename, File.join(RELEASE_PATH, filename)) }
  end

  def add_graphics_folder(vd_filename, path_from_graphics, recursive = true)
    vd_filename = vd_filename.to_s.downcase
    # Add vd_filename => graphics folder association
    GRAPHICS_FILES[vd_filename] = "graphics/#{path_from_graphics}".downcase
    # Tell if the path is recursive or not (we include the subfolder or not)
    if recursive
      NO_RECURSIVE_PATH.delete(vd_filename)
    else
      NO_RECURSIVE_PATH << vd_filename
    end
  end

  add_graphics_folder('animation', 'animations')
  add_graphics_folder('autotile', 'autotiles')
  add_graphics_folder('ball', 'ball')
  add_graphics_folder('battleback', 'battlebacks')
  add_graphics_folder('battler', 'battlers')
  add_graphics_folder('character', 'characters')
  add_graphics_folder('fog', 'fogs')
  add_graphics_folder('icon', 'icons')
  add_graphics_folder('interface', 'interface')
  add_graphics_folder('panorama', 'panoramas')
  add_graphics_folder('particle', 'particles')
  add_graphics_folder('pc', 'pc')
  add_graphics_folder('picture', 'pictures')
  add_graphics_folder('pokedex', 'pokedex', false)
  add_graphics_folder('title', 'titles')
  add_graphics_folder('tileset', 'tilesets')
  add_graphics_folder('transition', 'transitions')
  add_graphics_folder('windowskin', 'windowskins')
  add_graphics_folder('foot_print', 'pokedex/footprints')
  add_graphics_folder('b_icon', 'pokedex/pokeicon')
  add_graphics_folder('poke_front', 'pokedex/pokefront')
  add_graphics_folder('poke_front_s', 'pokedex/pokefrontshiny')
  add_graphics_folder('poke_back', 'pokedex/pokeback')
  add_graphics_folder('poke_back_s', 'pokedex/pokebackshiny')

  def delete_graphics_folder(vd_filename)
    vd_filename = vd_filename.to_s.downcase
    GRAPHICS_FILES.delete(vd_filename)
    NO_RECURSIVE_PATH.delete(vd_filename)
  end

  def add_data_files(id, &file_list_getter)
    DATA_FILES[id] = file_list_getter
  end

  add_data_files(0) { get_data_files.last }
  add_data_files(1) { get_data_files.first }
  add_data_files(2) { Dir['Data/Text/Dialogs/*.dat'] }
  add_data_files(3) { Dir['Data/PSDK/*.rxdata'] }
  add_data_files(4) { Dir['Data/Animations/*.dat'] }

  def delete_data_files(id)
    DATA_FILES.delete(id)
  end
end

rgss_main {}

ProjectCompilation.start
